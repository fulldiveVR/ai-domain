syntax = "proto3";

package ai_wayz;

service AiWayZService {
  rpc Complete(CompletionRequestMessage) returns (CompletionResponseMessage) {}
  rpc ChatComplete(ChatCompletionRequestMessage) returns (CompletionResponseMessage) {}
}

// Open ai

message CompletionRequestMessage {
  string prompt = 1;
  optional float temperature = 2;
  optional int32 max_response_tokens = 3;
  optional AiModel model = 4;
}

message ChatCompletionRequestMessage {
  repeated ChatMessage messages = 1;
  optional float temperature = 2;
  optional int32 max_response_tokens = 3;
  optional AiModel model = 4;
}

message CompletionResponseMessage {
  string text = 1;
  int32 used_tokens = 2;
  string model = 3;
}

message AiModel {
  string name = 1;
  int32 max_tokens = 2;
}

message ChatMessage {
  ChatMessageRole role = 1;
  string content = 2;
}

enum ChatMessageRole {
  system = 0;
  user = 1;
  assistant = 2;
}

// Readability

message ReadabilityContentFetcherRequestMessage {
  string url = 1;
}

message ReadabilityContentFetcherResponseMessage {
  string content = 1;
  string title = 2;
  string author = 3;
  string image = 4;
}

// Image generator

message GenerateImageRequestMessage {
  string prompt = 1;
}

message GenerateImageResponseMessage {
  string url = 1;
}

message UpscaleImageRequestMessage {
  string prompt = 1;
  int32 index = 2;
}

message UpscaleImageResponseMessage {
  string url = 1;
}